//
//  ScreenNode.swift
//  NavigationGraph
//
//  Created by mexicanpizza on 7/29/25.
//

import SwiftUI
import UIKit

/// A concrete implementation of `NavNode` for representing application screens.
///
/// `ScreenNode` provides a simple, ready-to-use navigation node that can represent
/// any screen in your application. It combines the navigation node protocol with
/// view controller creation capabilities in a single, reusable class.
///
/// ## Overview
///
/// Use `ScreenNode` when you need a straightforward navigation node without
/// creating custom node classes. It's particularly useful for:
/// - Prototyping navigation flows
/// - Simple screens with minimal configuration
/// - Generic nodes that can be reused across different contexts
/// - Integration with existing view controller classes
///
/// ## Type Parameters
///
/// - `Input`: The data type required to create and configure the view controller
/// - `Output`: The data type produced when the user completes interaction with the screen
///
/// ## Example Usage
///
/// ```swift
/// // Create a screen node for a profile view
/// let profileNode = ScreenNode<User, ProfileResult>("profile") { user in
///     let controller = ProfileViewController()
///     controller.configure(with: user)
///     return controller
/// }
///
/// // Add to navigation graph
/// graph.addNode(profileNode)
/// ```
///
/// ## Integration with Navigation System
///
/// `ScreenNode` automatically handles:
/// - Unique identifier generation based on type and custom ID
/// - View controller factory integration
/// - Type-safe data flow between input and output types
/// - Seamless integration with the navigation graph
public final class ScreenNode<Input, Output>: NavNode, ViewControllerProviding {
    /// The input data type for this screen node.
    public typealias InputType = Input
    
    /// The output data type for this screen node.
    public typealias OutputType = Output
    
    /// The unique identifier for this screen node.
    ///
    /// The identifier is generated by combining the class name with the custom ID
    /// provided during initialization. This ensures uniqueness while maintaining
    /// readability for debugging purposes.
    ///
    /// ## Format
    /// The identifier follows the pattern: `ScreenNode<InputType, OutputType>.customId`
    ///
    /// ## Example
    /// For a node created with ID "profile", the identifier might be:
    /// `ScreenNode<User, ProfileResult>.profile`
    public var id: String {
        return "\(Self.self).\(_id)"
    }
    
    /// The custom identifier component provided during initialization.
    private let _id: String
    
    /// Factory function for creating view controller instances.
    ///
    /// This function receives input data of type `Input` and returns a configured
    /// `NodeViewController` ready for presentation. The function is called by the
    /// navigation system when this node needs to be displayed.
    ///
    /// ## Input Data
    /// The input data is provided by the navigation system based on edge transforms
    /// from previous nodes in the navigation flow.
    ///
    /// ## View Controller Creation
    /// The factory should create and configure the view controller with any
    /// necessary dependencies and initial state based on the input data.
    let viewControllerFactory: (Input) -> NodeViewController
    
    /// Creates a new screen node with the specified identifier and view controller factory.
    ///
    /// - Parameters:
    ///   - id: A custom identifier for this screen node
    ///   - viewControllerFactory: A factory function that creates view controller instances
    ///
    /// ## Example
    ///
    /// ```swift
    /// let welcomeNode = ScreenNode<Void, WelcomeResult>("welcome") { _ in
    ///     return WelcomeViewController()
    /// }
    ///
    /// let profileNode = ScreenNode<User, Bool>("profile") { user in
    ///     let controller = ProfileViewController()
    ///     controller.user = user
    ///     return controller
    /// }
    /// ```
    ///
    /// ## Factory Function Guidelines
    ///
    /// The factory function should:
    /// - Create a new view controller instance each time it's called
    /// - Configure the view controller with the provided input data
    /// - Return a view controller that conforms to `NavigableViewController`
    /// - Avoid heavy initialization work that should be deferred to `viewDidLoad`
    public init(
        _ id: String,
        viewControllerFactory: @escaping (Input) -> NodeViewController
    ) {
        self._id = id
        self.viewControllerFactory = viewControllerFactory
    }
}
